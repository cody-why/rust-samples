/*
 * @Date: 2024-01-25 15:38:38
 * @LastEditTime: 2024-04-24 15:22:49
 */

fn main() {
    let s = r#"1.20,12.08,1.58,1.61,4.44,100.72,3.48,2.19,1.43,2.33,1.12,1.16,1.57,1.14,1.37,2.03,7.35,1.27,8.25,15.13,1.04,8.92,1.31,5.00,1.41,1.19,1.20,2.59,1.61,19.75,37.40,1.51,1.25,3.56,1.72,1.05,42.58,2.11,3.21,1.61,1.09,2.54,1.56,1.17,3.73,14.46,1.36,1.69,1.50,2.50,15.48,4.68,1.84,30.60,1.61,5.25,4.22,1.09,1.28,1.79,1.37,3.54,1.34,1.48,1.00,1.59,1.57,1.23,4.85,1.04,1.47,1.30,1.03,1.11,10.99,1.20,1.98,1.09,1.12,1.52,11.43,3.47,1.64,2.31,2.91,9.35,3.89,1.69,1.25,5.06,1.27,10.31,1.72,1.15,3.97,1,47,1.72,2.07,1.87,2.93,1.01,1.64,7.67,1.37,5.65,2.76,13.13,3.59,17.40,47.66,2.05,1.38,6.39,2.28,2.16,1.18"#;
    let v: Vec<f32> = s.split(',').map(|v| v.parse::<f32>().unwrap()).collect();

    let mut sum = vec![0; 10]; // 1-10
    let mut sum_t = vec![0; 10]; // 10-100
    let mut sum_l = vec![0; 10]; // 1.0-2.0之间,小数后1位的个数
    let mut sum_2 = vec![0; 10]; // 2.0-3.0之间的个数
    let mut sum_3 = vec![0; 10]; // 3.0-4.0之间的个数

    v.iter().for_each(|v| {
        // 统计1.0到2.0之间的个数
        if *v < 2.0 {
            // 取小数点后1位
            let i = (v * 10.0).floor() as usize % 10;
            // println!("a{}: {}", v, i);
            sum_l[i] += 1;
        }else if *v < 3.0{
            // 统计2.0到3.0之间的个数
            let i = (v * 10.0).floor() as usize % 10;
            sum_2[i] += 1;
        }else if *v < 4.0{
            // 统计2.0到3.0之间的个数
            let i = (v * 10.0).floor() as usize % 10;
            sum_3[i] += 1;
        }
        // 取整数
        let mut i = v.floor() as usize;

        if i > 10 {
            // 统计10到100
            i /= 10;
            if i > 10 {
                i = 10;
            }
            // println!("{}: {}", v, i);
            sum_t[i-1] += 1;
        }else {
            // 统计1到10
            sum[i-1] += 1;
        }
        
    });

    println!("1到10的统计:{:?}", sum);
    println!("10到100的统计:{:?}", sum_t);
    let total = v.len() as f32;

    // 输出1-10的概率
    sum.iter().enumerate().for_each(|(i, v)| {
        println!("{}: {} ", i+1, *v as f32 / total);
    });
    println!();
    println!("1.0到2.0: {:?}", sum_l);
    println!("2.0到3.0{:?}", sum_2);
    println!("3.0到4.0{:?}", sum_3);
    // 输出1.0到2.0概率
    let total = sum_l.iter().sum::<i32>() as f32;
    sum_l.iter().enumerate().for_each(|(i, v)| {
        println!("{}: {} ", i+1, *v as f32 / total);
    });
    
}

// 1到10的统计:[63, 15, 9, 4, 4, 2, 2, 2, 1, 1]
// 10到100的统计:[8, 1, 2, 3, 0, 0, 0, 0, 0, 1]
// 1: 0.53846157 
// 2: 0.12820514 
// 3: 0.07692308 
// 4: 0.034188036 
// 5: 0.034188036 
// 6: 0.008547009 
// 7: 0.017094018 
// 8: 0.017094018 
// 9: 0.008547009 
// 10: 0.017094018 

// 1.0到2.0: [10, 9, 9, 8, 4, 8, 8, 4, 2, 1]
// 2.0到3.0[3, 3, 1, 2, 0, 3, 0, 1, 0, 2]
// 3.0到4.0[0, 0, 1, 0, 2, 3, 0, 1, 1, 1]
// 1: 0.15873016 
// 2: 0.14285715 
// 3: 0.14285715 
// 4: 0.12698413 
// 5: 0.06349207 
// 6: 0.12698413 
// 7: 0.12698413 
// 8: 0.06349207 
// 9: 0.031746034 
// 10: 0.015873017

#[test]
fn test() {
    let mut sum = 0.0;
    for _ in 0..100 {
        let num = weighted_random();
        sum += num;
        println!("{}", num);
    }
    println!("=={}", sum / 100.0);
}


fn weighted_random() -> f32 {
    use rand::Rng;
    use rand::distributions::{Distribution, Uniform};
    let mut rng = rand::thread_rng();
    let uniform = Uniform::new(1.0, 100.0);

    // let min = |x, y| if x < y { x } else { y };
    if rng.gen_range(1..3) == 1{
        println!("===========");
        return rng.gen_range(1.01..1.20);
    }
    let mut number = uniform.sample(&mut rng);
    while rng.gen::<f32>() > 1.0 / (number*number) {
        number = uniform.sample(&mut rng);
    }
    number
    
}